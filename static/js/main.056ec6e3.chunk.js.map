{"version":3,"sources":["serviceWorker.ts","Counter.tsx","redux/counter-reducer.ts","Button.tsx","App.tsx","redux/store.ts","utils/localStorage-utils.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Counter","props","className","digit","initialState","disabledInc","disabledReset","setDigit","type","Button","dispatch","useDispatch","disabled","onClick","title","App","useSelector","state","counter","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunkMiddleware","subscribe","stringify","setItem","console","warn","saveState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCXC,SAASC,EAAQC,GACpB,OACI,yBAAKC,UAA2B,IAAhBD,EAAME,MAAc,eAAiB,WAChDF,EAAME,O,kBCNfC,EAAe,CACfD,MAAO,EACPE,aAAa,EACbC,eAAe,GAkBNC,EAAW,SAACJ,GAAD,MAAoB,CAACK,KAAM,YAAaL,UCdzD,SAASM,EAAOR,GAEnB,IAAIS,EAAWC,cAUf,OACI,4BAAQT,UAAW,MAAOU,SAAUX,EAAMW,SAAUC,QATnC,WACG,QAAhBZ,EAAMa,MACNJ,EAASH,EAASN,EAAME,MAAQ,IACT,UAAhBF,EAAMa,OACbJ,EAASH,EAAS,MAMjBN,EAAMa,OCFJC,MAff,WAAgB,IAAD,EAE+BC,aAA2C,SAAAC,GAAK,OAAIA,EAAMC,WAA/Ff,EAFM,EAENA,MAAOE,EAFD,EAECA,YAAaC,EAFd,EAEcA,cAEzB,OACI,yBAAKJ,UAAU,QACX,kBAACF,EAAD,CAASG,MAAOA,IAChB,yBAAKD,UAAU,YACX,kBAACO,EAAD,CAAQK,MAAO,MAAOF,SAAUP,EAAaF,MAAOA,IACpD,kBAACM,EAAD,CAAQK,MAAO,QAASF,SAAUN,EAAeH,MAAOA,O,eCZlEgB,EAAcC,YAAgB,CAChCF,QHI0B,WAAyE,IAAxED,EAAuE,uDAAlDb,EAAciB,EAAoC,uCAClG,OAAQA,EAAOb,MACX,IAAK,YACD,OAAO,2BACAS,GADP,IAEId,MAAOkB,EAAOlB,MACdE,YAA8B,IAAjBgB,EAAOlB,QAAqBkB,EAAOlB,OAAc,GAC9DG,cAAgC,IAAjBe,EAAOlB,QAAqBkB,EAAOlB,OAAc,KAGxE,QACI,OAAOc,MGZNK,EAAQC,YAAYJ,ECPR,WACrB,IACI,IAAMK,EAAkBC,aAAaC,QAAQ,aAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDDsCC,GAAaC,YAAgBC,MAE3EV,EAAMW,WAAU,YCGS,SAAChB,GACtB,IACI,IAAMO,EAAkBG,KAAKO,UAAUjB,GACvCQ,aAAaU,QAAQ,YAAaX,GACpC,MAAOK,GACLO,QAAQC,KAAKR,IDPjBS,CAAU,CACNpB,QAASI,EAAMiB,WAAWrB,aAOlCtB,OAAO0B,MAAQA,EEZfkB,IAASC,OAAO,kBAAC,IAAD,CAAUnB,MAAOA,GAC7B,kBAAC,EAAD,OACSoB,SAASC,eAAe,SPiI/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,a","file":"static/js/main.056ec6e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport './App.css';\r\n\r\ntype PropsType = {\r\n    digit: number\r\n}\r\n\r\nexport function Counter(props: PropsType) {\r\n    return (\r\n        <div className={props.digit === 5 ? \"counter-stop\" : \"counter\"}>\r\n            {props.digit}\r\n        </div>\r\n    )\r\n}","type ActionType = ReturnType<typeof setDigit>\r\n\r\nexport type CounterType = typeof initialState\r\n\r\nlet initialState = {\r\n    digit: 0,\r\n    disabledInc: false,\r\n    disabledReset: true\r\n}\r\n\r\nexport const counterReducer = (state: CounterType = initialState, action: ActionType): CounterType => {\r\n    switch (action.type) {\r\n        case 'SET_DIGIT': {\r\n            return {\r\n                ...state,\r\n                digit: action.digit,\r\n                disabledInc: action.digit === 5 ? true : action.digit === 0 ? false : false,\r\n                disabledReset: action.digit === 0 ? true : action.digit === 5 ? false : false\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setDigit = (digit: number) => ({type: 'SET_DIGIT', digit} as const)","import React from \"react\";\r\nimport './App.css';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setDigit} from \"./redux/counter-reducer\";\r\n\r\ntype PropsType = {\r\n    title: \"inc\" | \"reset\"\r\n    disabled: boolean\r\n    digit: number\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    let onClickHandler = () => {\r\n        if (props.title === \"inc\") {\r\n            dispatch(setDigit(props.digit + 1))\r\n        } else if (props.title === \"reset\") {\r\n            dispatch(setDigit(0))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={\"btn\"} disabled={props.disabled} onClick={onClickHandler}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./redux/store\";\r\nimport {CounterType} from \"./redux/counter-reducer\";\r\n\r\nfunction App() {\r\n\r\n    let {digit, disabledInc, disabledReset} = useSelector<AppRootStateType, CounterType>(state => state.counter)\r\n\r\n    return (\r\n        <div className=\"App3\">\r\n            <Counter digit={digit}/>\r\n            <div className=\"btnBlock\">\r\n                <Button title={\"inc\"} disabled={disabledInc} digit={digit}/>\r\n                <Button title={\"reset\"} disabled={disabledReset} digit={digit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from './counter-reducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {loadState, saveState} from \"../utils/localStorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunkMiddleware));\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\ndeclare const window: any\r\nwindow.store = store","import {AppRootStateType} from \"../redux/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch (err) {\r\n        console.warn(err)\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {store} from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}