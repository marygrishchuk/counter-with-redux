{"version":3,"sources":["serviceWorker.ts","Counter.tsx","Button.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Counter","props","className","digit","Button","disabled","onClick","title","changeDigit","App","useState","setDigit","disabledInc","setDisabledInc","disabledReset","setDisabledReset","useEffect","storedValue","Number","localStorage","getItem","setItem","JSON","stringify","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCXC,SAASC,EAAQC,GACpB,OACI,yBAAKC,UAA2B,IAAhBD,EAAME,MAAc,eAAiB,WAChDF,EAAME,OCAZ,SAASC,EAAOH,GAUnB,OACI,4BAAQC,UAAW,MAAOG,SAAUJ,EAAMI,SAAUC,QATnC,WACG,QAAhBL,EAAMM,MACNN,EAAMO,YAAYP,EAAME,MAAQ,GACT,UAAhBF,EAAMM,OACbN,EAAMO,YAAY,KAMjBP,EAAMM,OC4BJE,MA7Cf,WAAgB,IAAD,EAEeC,mBAAiB,GAFhC,mBAEJP,EAFI,KAEGQ,EAFH,OAG2BD,oBAAkB,GAH7C,mBAGJE,EAHI,KAGSC,EAHT,OAI+BH,oBAAkB,GAJjD,mBAIJI,EAJI,KAIWC,EAJX,KAsBX,SAASP,EAAYL,GACjBQ,EAASR,GACK,IAAVA,EACAU,GAAe,GACE,IAAVV,GACPU,GAAe,GACfE,GAAiB,IAEjBA,GAAiB,GAIzB,OA5BAC,qBAAU,WACN,IAAIC,EAAcC,OAAOC,aAAaC,QAAQ,iBAC9CH,GAAeN,EAASM,GACJ,IAAhBA,GACAJ,GAAe,GACfE,GAAiB,IACM,IAAhBE,IACPJ,GAAe,GACfE,GAAiB,MAEtB,IAEHC,qBAAU,WACNG,aAAaE,QAAQ,eAAgBC,KAAKC,UAAUpB,MACrD,CAACA,IAeA,yBAAKD,UAAU,QACX,kBAACF,EAAD,CAASG,MAAOA,IAChB,yBAAKD,UAAU,YACX,kBAACE,EAAD,CAAQG,MAAO,MAAOF,SAAUO,EAAaJ,YAAaA,EAAaL,MAAOA,IAC9E,kBAACC,EAAD,CAAQG,MAAO,QAASF,SAAUS,EAAeN,YAAaA,EAAaL,MAAOA,OCtClGqB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SJqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5aa09ee.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport './App.css';\r\n\r\ntype PropsType = {\r\n    digit: number\r\n}\r\n\r\nexport function Counter(props: PropsType) {\r\n    return (\r\n        <div className={props.digit === 5 ? \"counter-stop\" : \"counter\"}>\r\n            {props.digit}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './App.css';\r\n\r\ntype PropsType = {\r\n    title: \"inc\" | \"reset\"\r\n    disabled: boolean\r\n    changeDigit: (digit: number) => void\r\n    digit: number\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let onClickHandler = () => {\r\n        if (props.title === \"inc\") {\r\n            props.changeDigit(props.digit + 1)\r\n        } else if (props.title === \"reset\") {\r\n            props.changeDigit(0)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={\"btn\"} disabled={props.disabled} onClick={onClickHandler}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./Counter\";\r\nimport {Button} from \"./Button\";\r\n\r\nfunction App() {\r\n\r\n    const [digit, setDigit] = useState<number>(0)\r\n    const [disabledInc, setDisabledInc] = useState<boolean>(false)\r\n    const [disabledReset, setDisabledReset] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        let storedValue = Number(localStorage.getItem('counterValue'))\r\n        storedValue && setDigit(storedValue)\r\n        if (storedValue === 5) {\r\n            setDisabledInc(true)\r\n            setDisabledReset(false)\r\n        } else if (storedValue === 0) {\r\n            setDisabledInc(false)\r\n            setDisabledReset(true)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('counterValue', JSON.stringify(digit))\r\n    }, [digit])\r\n\r\n    function changeDigit(digit: number) {\r\n        setDigit(digit)\r\n        if (digit === 5) {\r\n            setDisabledInc(true)\r\n        } else if (digit === 0) {\r\n            setDisabledInc(false)\r\n            setDisabledReset(true)\r\n        } else {\r\n            setDisabledReset(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App3\">\r\n            <Counter digit={digit}/>\r\n            <div className=\"btnBlock\">\r\n                <Button title={\"inc\"} disabled={disabledInc} changeDigit={changeDigit} digit={digit}/>\r\n                <Button title={\"reset\"} disabled={disabledReset} changeDigit={changeDigit} digit={digit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}